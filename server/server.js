#!/usr/bin/env node

/**
 * StarFlow Server Entry Point
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ StarFlow –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

const StarFlowApp = require('./app');

// Handle uncaught exceptions early
process.on('uncaughtException', (err) => {
    console.error('üí• Uncaught Exception:', err);
    console.error('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(1);
});

// Handle unhandled promise rejections early
process.on('unhandledRejection', (err) => {
    console.error('üí• Unhandled Promise Rejection:', err);
    console.error('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    process.exit(1);
});

async function startServer() {
    try {
        console.log('üåü –ó–∞–ø—É—Å–∫ StarFlow —Å–µ—Ä–≤–µ—Ä–∞...');
        console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
        console.log(`üîß –°—Ä–µ–¥–∞: ${process.env.NODE_ENV || 'development'}`);
        console.log(`üì¶ Node.js –≤–µ—Ä—Å–∏—è: ${process.version}`);
        
        // Create and start the application
        const app = new StarFlowApp();
        const port = process.env.PORT || 3000;
        
        await app.start(port);
        
        console.log('üéâ StarFlow —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        
        // Log important information
        if (process.env.NODE_ENV === 'development') {
            console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
            console.log(`   üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${port}`);
            console.log(`   üì° API: http://localhost:${port}/api`);
            console.log(`   üè• Health check: http://localhost:${port}/health`);
            
            if (process.env.TELEGRAM_BOT_TOKEN) {
                const botUsername = process.env.TELEGRAM_BOT_USERNAME;
                if (botUsername) {
                    console.log(`   üì± Telegram WebApp: https://t.me/${botUsername}?startapp`);
                }
            }
            
            console.log('\nüîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
            console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
            console.log(`   JWT_SECRET: ${process.env.JWT_SECRET ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
            console.log(`   TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
            console.log(`   WEB3_PROVIDER_URL: ${process.env.WEB3_PROVIDER_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

// Start the server
startServer(); 