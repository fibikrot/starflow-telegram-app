const axios = require('axios');
const crypto = require('crypto');
const User = require('../models/User');
const Transaction = require('../models/Transaction');

class TelegramService {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN;
    this.botUrl = `https://api.telegram.org/bot${this.botToken}`;
    this.verificationRequests = new Map(); // In production, use Redis
    this.init();
  }

  async init() {
    if (this.botToken) {
      try {
        // Set webhook if TELEGRAM_WEBHOOK_URL is provided
        if (process.env.TELEGRAM_WEBHOOK_URL) {
          await this.setWebhook(process.env.TELEGRAM_WEBHOOK_URL);
        }
        
        // Set bot commands
        await this.setBotCommands();
        
        console.log('Telegram service initialized successfully');
      } catch (error) {
        console.error('Failed to initialize Telegram service:', error);
      }
    } else {
      console.warn('Telegram bot token not provided, service will not be available');
    }
  }

  async setWebhook(url) {
    try {
      const response = await axios.post(`${this.botUrl}/setWebhook`, {
        url: `${url}/api/telegram/webhook`,
        allowed_updates: ['message', 'callback_query']
      });
      
      if (response.data.ok) {
        console.log('Telegram webhook set successfully');
      } else {
        console.error('Failed to set Telegram webhook:', response.data);
      }
    } catch (error) {
      console.error('Error setting Telegram webhook:', error);
    }
  }

  async setBotCommands() {
    const commands = [
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'link', description: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ StarFlow' },
      { command: 'balance', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥' },
      { command: 'stats', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
      { command: 'referral', description: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞' },
      { command: 'help', description: '–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞' }
    ];

    try {
      await axios.post(`${this.botUrl}/setMyCommands`, {
        commands
      });
      console.log('Bot commands set successfully');
    } catch (error) {
      console.error('Error setting bot commands:', error);
    }
  }

  async sendMessage(chatId, text, options = {}) {
    if (!this.botToken) {
      console.warn('Telegram bot token not available');
      return false;
    }

    try {
      const response = await axios.post(`${this.botUrl}/sendMessage`, {
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      });

      return response.data.ok;
    } catch (error) {
      console.error('Error sending Telegram message:', error);
      return false;
    }
  }

  async handleUpdate(update) {
    if (update.message) {
      await this.handleMessage(update.message);
    } else if (update.callback_query) {
      await this.handleCallbackQuery(update.callback_query);
    }
  }

  async handleMessage(message) {
    const chatId = message.chat.id;
    const text = message.text;
    const user = message.from;

    if (!text) return;

    // Handle commands
    if (text.startsWith('/')) {
      await this.handleCommand(chatId, text, user);
    } else {
      // Handle verification codes
      await this.handleVerificationCode(chatId, text, user);
    }
  }

  async handleCommand(chatId, command, user) {
    const cmd = command.split(' ')[0].toLowerCase();

    switch (cmd) {
      case '/start':
        await this.handleStartCommand(chatId, user);
        break;
      case '/link':
        await this.handleLinkCommand(chatId, user);
        break;
      case '/balance':
        await this.handleBalanceCommand(chatId, user);
        break;
      case '/stats':
        await this.handleStatsCommand(chatId, user);
        break;
      case '/referral':
        await this.handleReferralCommand(chatId, user);
        break;
      case '/help':
        await this.handleHelpCommand(chatId, user);
        break;
      default:
        await this.sendMessage(chatId, 
          '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        );
    }
  }

  async handleStartCommand(chatId, user) {
    const existingUser = await User.findOne({ telegramId: chatId });
    
    if (existingUser) {
      await this.sendMessage(chatId,
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${user.first_name}!\n\n` +
        `üåü –í–∞—à –±–∞–ª–∞–Ω—Å: ${existingUser.starsBalance} –∑–≤–µ–∑–¥\n` +
        `üìä –£—Ä–æ–≤–µ–Ω—å: ${existingUser.level}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
      );
    } else {
      await this.sendMessage(chatId,
        `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarFlow!\n\n` +
        `–≠—Ç–æ Telegram –±–æ—Ç –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã StarFlow - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π Web3 —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≤–∞–ª—é—Ç–æ–π "–∑–≤–µ–∑–¥—ã".\n\n` +
        `üîó –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n` +
        `1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ StarFlow\n` +
        `2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –≤—ã–±–µ—Ä–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"\n` +
        `3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n` +
        `üí° –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n` +
        `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥\n` +
        `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
        `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n` +
        `‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.`
      );
    }
  }

  async handleLinkCommand(chatId, user) {
    const existingUser = await User.findOne({ telegramId: chatId });
    
    if (existingUser) {
      await this.sendMessage(chatId,
        `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ StarFlow!\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${existingUser.username}\n` +
        `üåü –ë–∞–ª–∞–Ω—Å: ${existingUser.starsBalance} –∑–≤–µ–∑–¥\n` +
        `üìä –£—Ä–æ–≤–µ–Ω—å: ${existingUser.level}`
      );
    } else {
      await this.sendMessage(chatId,
        `üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n` +
        `1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ StarFlow\n` +
        `2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n` +
        `3. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"\n` +
        `4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n` +
        `‚ùì –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ!`
      );
    }
  }

  async handleBalanceCommand(chatId, user) {
    const existingUser = await User.findOne({ telegramId: chatId });
    
    if (!existingUser) {
      await this.sendMessage(chatId,
        `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ StarFlow.`
      );
      return;
    }

    // Get recent transactions
    const recentTransactions = await Transaction.find({
      user: existingUser._id
    })
    .sort({ createdAt: -1 })
    .limit(5)
    .lean();

    let transactionText = '';
    if (recentTransactions.length > 0) {
      transactionText = '\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n';
      recentTransactions.forEach(tx => {
        const date = tx.createdAt.toLocaleDateString('ru-RU');
        const amount = tx.amount > 0 ? `+${tx.amount}` : tx.amount;
        transactionText += `‚Ä¢ ${date}: ${amount} ‚≠ê\n`;
      });
    }

    await this.sendMessage(chatId,
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å\n\n` +
      `üåü –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${existingUser.starsBalance} –∑–≤–µ–∑–¥\n` +
      `üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${existingUser.totalStarsEarned} –∑–≤–µ–∑–¥\n` +
      `üìâ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${existingUser.totalStarsSpent} –∑–≤–µ–∑–¥\n` +
      `üìä –£—Ä–æ–≤–µ–Ω—å: ${existingUser.level}\n` +
      `üéØ –û–ø—ã—Ç: ${existingUser.experience}/${existingUser.nextLevelExp}` +
      transactionText
    );
  }

  async handleStatsCommand(chatId, user) {
    const existingUser = await User.findOne({ telegramId: chatId });
    
    if (!existingUser) {
      await this.sendMessage(chatId,
        `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ StarFlow.`
      );
      return;
    }

    // Calculate stats
    const totalReferrals = existingUser.referrals ? existingUser.referrals.length : 0;
    const gameStats = existingUser.gameStats || {};
    const registrationDate = existingUser.createdAt.toLocaleDateString('ru-RU');
    const daysSinceRegistration = Math.floor((Date.now() - existingUser.createdAt) / (1000 * 60 * 60 * 24));

    await this.sendMessage(chatId,
      `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${existingUser.username}\n` +
      `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${registrationDate} (${daysSinceRegistration} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n` +
      `üìä –£—Ä–æ–≤–µ–Ω—å: ${existingUser.level}\n` +
      `üéØ –û–ø—ã—Ç: ${existingUser.experience}\n\n` +
      `üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n` +
      `‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${existingUser.starsBalance} ‚≠ê\n` +
      `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${existingUser.totalStarsEarned} ‚≠ê\n` +
      `‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${existingUser.totalStarsSpent} ‚≠ê\n\n` +
      `üéÆ –ò–≥—Ä—ã:\n` +
      `‚Ä¢ –õ—É—á—à–∏–π —Å—á–µ—Ç –≤ –∫–ª–∏–∫–µ—Ä–µ: ${gameStats.bestClickerScore || 0}\n` +
      `‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${gameStats.gamesPlayed || 0}\n` +
      `‚Ä¢ –ó–≤–µ–∑–¥ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏–≥—Ä–∞—Ö: ${gameStats.totalStarsEarned || 0}\n\n` +
      `üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${totalReferrals}\n` +
      `üî• –°–µ—Ä–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: ${existingUser.dailyStreak || 0}`
    );
  }

  async handleReferralCommand(chatId, user) {
    const existingUser = await User.findOne({ telegramId: chatId });
    
    if (!existingUser) {
      await this.sendMessage(chatId,
        `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ StarFlow.`
      );
      return;
    }

    const totalReferrals = existingUser.referrals ? existingUser.referrals.length : 0;
    const referralEarnings = existingUser.referralEarnings || 0;
    const referralCode = existingUser.referralCode;

    await this.sendMessage(chatId,
      `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n` +
      `üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${referralCode}</code>\n` +
      `üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${totalReferrals}\n` +
      `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralEarnings} ‚≠ê\n\n` +
      `üéÅ –ë–æ–Ω—É—Å—ã:\n` +
      `‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: 100 ‚≠ê\n` +
      `‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: 50 ‚≠ê\n` +
      `‚Ä¢ % —Å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–∑–µ–π: 5%\n\n` +
      `üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥!`,
      {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º',
              switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ StarFlow –∏ –ø–æ–ª—É—á–∏ 50 –∑–≤–µ–∑–¥! –ò—Å–ø–æ–ª—å–∑—É–π –º–æ–π –∫–æ–¥: ${referralCode}`
            }
          ]]
        }
      }
    );
  }

  async handleHelpCommand(chatId, user) {
    await this.sendMessage(chatId,
      `üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n` +
      `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
      `/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫ StarFlow\n` +
      `/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥\n` +
      `/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
      `/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n` +
      `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
      `üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n` +
      `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥\n` +
      `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö\n` +
      `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n` +
      `‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö\n` +
      `‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–ª–∞–Ω—Å—É\n\n` +
      `‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`
    );
  }

  async handleVerificationCode(chatId, code, user) {
    // Check if code is a verification code
    if (!/^[A-Z0-9]{6}$/.test(code)) {
      return; // Not a verification code format
    }

    const verification = this.verificationRequests.get(code);
    
    if (!verification) {
      await this.sendMessage(chatId,
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n` +
        `–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ StarFlow.`
      );
      return;
    }

    // Check if code is expired (10 minutes)
    if (Date.now() - verification.createdAt > 10 * 60 * 1000) {
      this.verificationRequests.delete(code);
      await this.sendMessage(chatId,
        `‚è∞ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫.\n\n` +
        `–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ StarFlow.`
      );
      return;
    }

    // Update verification with Telegram user info
    verification.telegramId = chatId;
    verification.username = user.username;
    verification.firstName = user.first_name;
    verification.lastName = user.last_name;
    verification.verified = true;

    await this.sendMessage(chatId,
      `‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n\n` +
      `–¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ StarFlow.\n\n` +
      `–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∏ –Ω–∞—á–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`
    );
  }

  async handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    // Handle different callback queries
    // This can be extended for inline keyboards
    
    // Answer callback query to remove loading state
    await axios.post(`${this.botUrl}/answerCallbackQuery`, {
      callback_query_id: callbackQuery.id
    });
  }

  generateVerificationCode() {
    return crypto.randomBytes(3).toString('hex').toUpperCase();
  }

  async createVerificationRequest(userId, code) {
    this.verificationRequests.set(code, {
      userId,
      code,
      createdAt: Date.now(),
      verified: false
    });

    // Auto-cleanup after 10 minutes
    setTimeout(() => {
      this.verificationRequests.delete(code);
    }, 10 * 60 * 1000);
  }

  async getPendingVerification(code) {
    const verification = this.verificationRequests.get(code);
    return verification && verification.verified ? verification : null;
  }

  async removeVerification(code) {
    this.verificationRequests.delete(code);
  }

  async getBotInfo() {
    if (!this.botToken) return null;

    try {
      const response = await axios.get(`${this.botUrl}/getMe`);
      return response.data.result;
    } catch (error) {
      console.error('Error getting bot info:', error);
      return null;
    }
  }

  // Notification methods
  async sendStarsReceivedNotification(telegramId, amount, source) {
    const sourceEmojis = {
      game: 'üéÆ',
      referral: 'üë•',
      daily: 'üìÖ',
      transfer: 'üí∏',
      admin: 'üéÅ'
    };

    const emoji = sourceEmojis[source] || '‚≠ê';
    
    await this.sendMessage(telegramId,
      `${emoji} –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–≤–µ–∑–¥—ã!\n\n` +
      `üí∞ –°—É–º–º–∞: +${amount} ‚≠ê\n` +
      `üìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${this.getSourceName(source)}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.`
    );
  }

  async sendTransferNotification(telegramId, amount, from, message = '') {
    await this.sendMessage(telegramId,
      `üí∏ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω!\n\n` +
      `üí∞ –°—É–º–º–∞: +${amount} ‚≠ê\n` +
      `üë§ –û—Ç: ${from}\n` +
      (message ? `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n` : '') +
      `\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞.`
    );
  }

  async sendExchangeNotification(telegramId, starsAmount, cryptoAmount, currency, status) {
    const statusEmojis = {
      completed: '‚úÖ',
      failed: '‚ùå',
      pending: '‚è≥'
    };

    const emoji = statusEmojis[status] || 'üìä';
    
    await this.sendMessage(telegramId,
      `${emoji} –û–±–º–µ–Ω ${status === 'completed' ? '–∑–∞–≤–µ—Ä—à–µ–Ω' : status === 'failed' ? '–Ω–µ —É–¥–∞–ª—Å—è' : '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'}\n\n` +
      `‚≠ê –ó–≤–µ–∑–¥—ã: ${starsAmount}\n` +
      `üíé –ü–æ–ª—É—á–µ–Ω–æ: ${cryptoAmount} ${currency}\n\n` +
      (status === 'completed' ? '–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!' : 
       status === 'failed' ? '–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.' : 
       '–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')
    );
  }

  async sendDailyReminderNotification(telegramId, username) {
    await this.sendMessage(telegramId,
      `üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${username}!\n\n` +
      `‚≠ê –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–±—Ä–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤ StarFlow!\n` +
      `üî• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –±–æ–Ω—É—Å–æ–≤.\n\n` +
      `üéÆ –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã!`
    );
  }

  getSourceName(source) {
    const sourceNames = {
      game: '–ò–≥—Ä—ã',
      referral: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
      daily: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
      transfer: '–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å',
      task: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è'
    };

    return sourceNames[source] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

module.exports = new TelegramService(); 