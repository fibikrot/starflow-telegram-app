const { Web3 } = require('web3');
require('dotenv').config();

class StarFlowNFT {
    constructor() {
        this.web3 = new Web3(process.env.WEB3_PROVIDER_URL || 'https://rpc-mumbai.maticvigil.com/');
        this.contractAddress = process.env.NFT_CONTRACT_ADDRESS || '0x...';
        this.privateKey = process.env.WALLET_PRIVATE_KEY;
        
        // ABI –¥–ª—è ERC-721 NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ StarFlow Stars
        this.contractABI = [
            {
                "inputs": [{"internalType": "address", "name": "owner", "type": "address"}],
                "name": "balanceOf",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "uint256", "name": "tokenId", "type": "uint256"}],
                "name": "ownerOf",
                "outputs": [{"internalType": "address", "name": "", "type": "address"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "uint256", "name": "tokenId", "type": "uint256"}],
                "name": "tokenURI",
                "outputs": [{"internalType": "string", "name": "", "type": "string"}],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {"internalType": "address", "name": "to", "type": "address"},
                    {"internalType": "string", "name": "uri", "type": "string"}
                ],
                "name": "mint",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "totalSupply",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        if (this.contractAddress !== '0x...') {
            this.contract = new this.web3.eth.Contract(this.contractABI, this.contractAddress);
        }

        // –¢–∏–ø—ã NFT –∑–≤–µ–∑–¥
        this.starTypes = {
            BRONZE: {
                name: 'Bronze Star',
                rarity: 'Common',
                requirement: 100,
                image: 'ü•â‚≠ê',
                description: 'A bronze star for dedicated clickers'
            },
            SILVER: {
                name: 'Silver Star',
                rarity: 'Rare',
                requirement: 1000,
                image: 'ü•à‚≠ê',
                description: 'A silver star for skilled players'
            },
            GOLD: {
                name: 'Gold Star',
                rarity: 'Epic',
                requirement: 10000,
                image: 'ü•á‚≠ê',
                description: 'A golden star for elite clickers'
            },
            DIAMOND: {
                name: 'Diamond Star',
                rarity: 'Legendary',
                requirement: 100000,
                image: 'üíé‚≠ê',
                description: 'A legendary diamond star for masters'
            },
            COSMIC: {
                name: 'Cosmic Star',
                rarity: 'Mythic',
                requirement: 1000000,
                image: 'üåå‚≠ê',
                description: 'A mythic cosmic star for legends'
            }
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getNFTBalance(userAddress) {
        try {
            if (!this.contract) return '0';
            
            const balance = await this.contract.methods.balanceOf(userAddress).call();
            return balance.toString();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ NFT:', error);
            return '0';
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserNFTs(userAddress) {
        try {
            if (!this.contract) return [];
            
            const balance = await this.contract.methods.balanceOf(userAddress).call();
            const nfts = [];
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ tokenOfOwnerByIndex
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
            for (let i = 0; i < Math.min(balance, 10); i++) {
                nfts.push({
                    tokenId: i + 1,
                    name: this.starTypes.BRONZE.name,
                    image: this.starTypes.BRONZE.image,
                    rarity: this.starTypes.BRONZE.rarity,
                    description: this.starTypes.BRONZE.description
                });
            }
            
            return nfts;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT:', error);
            return [];
        }
    }

    // –ú–∏–Ω—Ç NFT –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    async mintAchievementNFT(userAddress, totalClicks) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–≤–µ–∑–¥—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–ª–∏–∫–æ–≤
            let starType = null;
            
            if (totalClicks >= this.starTypes.COSMIC.requirement) {
                starType = this.starTypes.COSMIC;
            } else if (totalClicks >= this.starTypes.DIAMOND.requirement) {
                starType = this.starTypes.DIAMOND;
            } else if (totalClicks >= this.starTypes.GOLD.requirement) {
                starType = this.starTypes.GOLD;
            } else if (totalClicks >= this.starTypes.SILVER.requirement) {
                starType = this.starTypes.SILVER;
            } else if (totalClicks >= this.starTypes.BRONZE.requirement) {
                starType = this.starTypes.BRONZE;
            }

            if (!starType) {
                return {
                    success: false,
                    message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è NFT'
                };
            }

            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
            const metadata = {
                name: starType.name,
                description: starType.description,
                image: starType.image,
                attributes: [
                    {
                        trait_type: 'Rarity',
                        value: starType.rarity
                    },
                    {
                        trait_type: 'Clicks Required',
                        value: starType.requirement
                    },
                    {
                        trait_type: 'Achievement Date',
                        value: new Date().toISOString()
                    }
                ]
            };

            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –º–∏–Ω—Ç —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                success: true,
                tokenId: Math.floor(Math.random() * 10000) + 1,
                starType: starType.name,
                rarity: starType.rarity,
                metadata: metadata,
                message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${starType.name}!`
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞ NFT:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    async getCollectionInfo() {
        try {
            return {
                name: 'StarFlow Stars',
                symbol: 'STARS',
                description: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ StarFlow',
                totalSupply: '1000', // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
                floorPrice: '0.01 MATIC',
                volume24h: '5.2 MATIC',
                owners: '234',
                network: 'Polygon Mumbai',
                contractAddress: this.contractAddress
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
            return null;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å NFT
    async getNFTPrice(rarity) {
        const prices = {
            'Common': 0.01,    // MATIC
            'Rare': 0.05,
            'Epic': 0.1,
            'Legendary': 0.5,
            'Mythic': 1.0
        };

        return prices[rarity] || 0.01;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π NFT
    canMintNFT(totalClicks, userNFTs) {
        const userRarities = userNFTs.map(nft => nft.rarity);
        
        for (const [key, starType] of Object.entries(this.starTypes)) {
            if (totalClicks >= starType.requirement && !userRarities.includes(starType.rarity)) {
                return {
                    canMint: true,
                    starType: starType,
                    message: `–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ${starType.name}!`
                };
            }
        }

        return {
            canMint: false,
            message: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∫–ª–∏–∫–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö NFT!'
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É NFT
    async getNFTStats() {
        return {
            totalMinted: 1000,
            totalOwners: 234,
            averagePrice: '0.05 MATIC',
            topSale: '1.5 MATIC',
            rarityDistribution: {
                'Common': 60,    // %
                'Rare': 25,
                'Epic': 10,
                'Legendary': 4,
                'Mythic': 1
            }
        };
    }
}

module.exports = StarFlowNFT; 