#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram Webhook
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/setWebhook.js [URL]
 */

require('dotenv').config();
const axios = require('axios');

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7637068885:AAHUnq0htwtwnLGCW00YBjUKIq6RxX9lVvM';
const WEBHOOK_URL = process.argv[2] || process.env.WEBHOOK_URL;

if (!BOT_TOKEN) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

if (!WEBHOOK_URL) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ URL webhook:');
    console.error('   node scripts/setWebhook.js https://yourdomain.com/webhook/telegram');
    console.error('   –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WEBHOOK_URL –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

async function setWebhook(url) {
    try {
        const webhookUrl = `${url}/api/telegram/webhook`;
        
        console.log(`üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: ${webhookUrl}`);
        
        const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
            url: webhookUrl,
            allowed_updates: ['message', 'callback_query', 'inline_query']
        });

        if (response.data.ok) {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
            console.log(`üì° URL: ${webhookUrl}`);
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', response.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

async function deleteWebhook() {
    try {
        console.log('üóëÔ∏è –£–¥–∞–ª—è—é webhook...');
        
        const response = await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);

        if (response.data.ok) {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', response.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

async function getWebhookInfo() {
    try {
        console.log('‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook...');
        
        const response = await axios.get(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);

        if (response.data.ok) {
            const info = response.data.result;
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
            console.log(`  URL: ${info.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
            console.log(`  –°—Ç–∞—Ç—É—Å: ${info.url ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}`);
            console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${info.pending_update_count}`);
            
            if (info.last_error_date) {
                console.log(`  –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${new Date(info.last_error_date * 1000).toLocaleString()}`);
                console.log(`  –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${info.last_error_message}`);
            }
            
            if (info.allowed_updates) {
                console.log(`  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${info.allowed_updates.join(', ')}`);
            }
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', response.data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

async function testWebhook(url) {
    try {
        const webhookUrl = `${url}/api/telegram/webhook`;
        
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É—é webhook: ${webhookUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint
        const testResponse = await axios.get(`${url}/health`);
        
        if (testResponse.status === 200) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç!');
            await setWebhook(url);
        } else {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç');
        }
    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }
}

function printHelp() {
    console.log(`
ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram Webhook

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/setWebhook.js <URL>        - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
  node scripts/setWebhook.js delete       - –£–¥–∞–ª–∏—Ç—å webhook  
  node scripts/setWebhook.js info         - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  node scripts/setWebhook.js test <URL>   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/setWebhook.js https://your-app.railway.app
  node scripts/setWebhook.js https://your-app.render.com
  node scripts/setWebhook.js delete
  node scripts/setWebhook.js info
  node scripts/setWebhook.js test https://your-app.railway.app
`);
}

async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        printHelp();
        return;
    }
    
    const command = args[0];
    
    switch (command) {
        case 'delete':
            await deleteWebhook();
            break;
        case 'info':
            await getWebhookInfo();
            break;
        case 'test':
            if (args[1]) {
                await testWebhook(args[1]);
            } else {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
            break;
        case 'help':
            printHelp();
            break;
        default:
            if (command.startsWith('http')) {
                await setWebhook(command);
            } else {
                console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                printHelp();
            }
    }
}

if (require.main === module) {
    main();
}

module.exports = { setWebhook, deleteWebhook, getWebhookInfo, testWebhook }; 
main().catch(console.error); 